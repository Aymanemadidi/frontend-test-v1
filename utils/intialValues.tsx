import { z } from "zod";
import { CreateSellerInput } from "../hooks/useCreateSellerByAdmin";
import { useForm, zodResolver } from "@mantine/form";
import { CreateBuyerInput } from "../hooks/useCreateBuyerByAdmin";

export const buyerInitialValues: CreateBuyerInput = {
	nomEntreprise: "",
	numeroSiret: "",
	codePostal: "",
	ville: "",
	departement: "",
	pays: "",
	numFixe: "",
	numPortable: "",
	dateOfBirth: "",
	nationality: "",
	website: "",
	firstName: "",
	lastName: "",
	email: "",
	pseudo: "",
	password: "",
	adresse: "",
	companyAdresse: "",
	civilite: "",
	tvaIntra: "",
	typeCompte: "entreprise",
	countryOfResidency: "",
	companyCodePostal: "",
	companyPays: "",
	companyVille: "",
};

export const initialValues: CreateSellerInput = {
	nomEntreprise: "",
	numeroSiret: "",
	groupe: "",
	codeNAF: "",
	codePostal: "",
	ville: "",
	departement: "",
	pays: "",
	IBAN: "",
	numFixe: "",
	numPortable: "",
	dateOfBirth: "",
	nationality: "",
	website: "",
	firstName: "",
	lastName: "",
	email: "",
	pseudo: "",
	password: "",
	adresse: "",
	numberOfEmployees: "<10",
	companyAdresse: "",
	civilite: "",
	tvaIntra: "",
	typeCompte: "",
	statutLegal: "",
	countryOfResidency: "",
	companyCodePostal: "",
	companyVille: "",
	companyPays: "",
	refundAdresse: "",
	refundCodePostal: "",
	refundVille: "",
	refundPays: "",
};

const buyerSchema = z.object({
	email: z.string().email({ message: "E-mail invalide!" }),
	numeroSiret: z.string().min(1, { message: "Numero Siret invalide!" }),
	groupe: z.string().min(1, { message: "Ce champ est requis." }),
	nomEntreprise: z.string().min(1, { message: "Ce champ est requis." }),
	companyAdresse: z.string().min(1, { message: "Ce champ est requis." }),
	companyCodePostal: z.string().min(1, { message: "Ce champ est requis." }),
	companyPays: z.string().min(1, { message: "Ce champ est requis." }),
	companyVille: z.string().min(1, { message: "Ce champ est requis." }),
	// typeCompte: z.string().min(1, { message: "Ce champ est requis." }),
	departement: z.string().min(1, { message: "Ce champ est requis." }),
	civilite: z.string().min(1, { message: "Ce champ est requis." }),
	firstName: z.string().min(1, { message: "Ce champ est requis." }),
	lastName: z.string().min(1, { message: "Ce champ est requis." }),
	dateOfBirth: z.date(),
	nationality: z.string().min(1, { message: "Ce champ est requis." }),
	countryOfResidency: z.string().min(1, { message: "Ce champ est requis." }),
	numFixe: z.string().min(1, { message: "Ce champ est requis." }),
	numPortable: z.string().min(1, { message: "Ce champ est requis." }),
	adresse: z.string().min(1, { message: "Ce champ est requis." }),
	ville: z.string().min(1, { message: "Ce champ est requis." }),
	pays: z.string().min(1, { message: "Ce champ est requis." }),
	codePostal: z.string().min(1, { message: "Ce champ est requis." }),
});

const schema = z.object({
	email: z.string().email({ message: "E-mail invalide!" }),
	numeroSiret: z.string().min(1, { message: "Numero Siret invalide!" }),
	groupe: z.string().min(1, { message: "Ce champ est requis." }),
	nomEntreprise: z.string().min(1, { message: "Ce champ est requis." }),
	companyAdresse: z.string().min(1, { message: "Ce champ est requis." }),
	companyCodePostal: z.string().min(1, { message: "Ce champ est requis." }),
	companyPays: z.string().min(1, { message: "Ce champ est requis." }),
	companyVille: z.string().min(1, { message: "Ce champ est requis." }),
	// typeCompte: z.string().min(1, { message: "Ce champ est requis." }),
	departement: z.string().min(1, { message: "Ce champ est requis." }),
	civilite: z.string().min(1, { message: "Ce champ est requis." }),
	firstName: z.string().min(1, { message: "Ce champ est requis." }),
	lastName: z.string().min(1, { message: "Ce champ est requis." }),
	dateOfBirth: z.date(),
	nationality: z.string().min(1, { message: "Ce champ est requis." }),
	countryOfResidency: z.string().min(1, { message: "Ce champ est requis." }),
	numFixe: z.string().min(1, { message: "Ce champ est requis." }),
	numPortable: z.string().min(1, { message: "Ce champ est requis." }),
	adresse: z.string().min(1, { message: "Ce champ est requis." }),
	ville: z.string().min(1, { message: "Ce champ est requis." }),
	pays: z.string().min(1, { message: "Ce champ est requis." }),
	codePostal: z.string().min(1, { message: "Ce champ est requis." }),
	refundAdresse: z.string().min(1, { message: "Ce champ est requis." }),
	refundCodePostal: z.string().min(1, { message: "Ce champ est requis." }),
	refundPays: z.string().min(1, { message: "Ce champ est requis." }),
	refundVille: z.string().min(1, { message: "Ce champ est requis." }),
});

export const getForm = () =>
	useForm({
		validate: zodResolver(schema),
		initialValues: {
			nomEntreprise: "",
			numeroSiret: "",
			groupe: "",
			codeNAF: "",
			codePostal: "",
			ville: "",
			departement: "",
			pays: "",
			IBAN: "",
			numFixe: "",
			numPortable: "",
			dateOfBirth: "",
			nationality: "",
			website: "",
			firstName: "",
			lastName: "",
			email: "",
			pseudo: "",
			password: "",
			adresse: "",
			numberOfEmployees: "",
			civilite: "",
			tvaIntra: "",
			typeCompte: "",
			statutLegal: "",
			countryOfResidency: "",
			companyAdresse: "",
			companyCodePostal: "",
			companyVille: "",
			companyPays: "",
			refundAdresse: "",
			refundCodePostal: "",
			refundVille: "",
			refundPays: "",
		},
	});

export const getBuyerForm = () =>
	useForm({
		validate: zodResolver(buyerSchema),
		initialValues: {
			nomEntreprise: "",
			numeroSiret: "",
			codePostal: "",
			ville: "",
			departement: "",
			pays: "",
			numFixe: "",
			numPortable: "",
			dateOfBirth: "",
			nationality: "",
			website: "",
			firstName: "",
			lastName: "",
			email: "",
			pseudo: "",
			password: "",
			adresse: "",
			companyAdresse: "",
			civilite: "",
			tvaIntra: "",
			typeCompte: "entreprise",
			countryOfResidency: "",
			companyCodePostal: "",
			companyPays: "",
			companyVille: "",
		},
	});
